%% initialization
% close all;
clear;
clc;

%% path settings
pilot = 'pilot ii';
institute = 'ccu';
root_path = fullfile(dropboxdir,...
    'data','fr','humans','vmu24',pilot);
gaped_path = fullfile(root_path,'gaped');
bhv_path = fullfile(root_path,'cohorts',institute,'behavior');
mouse_path = fullfile(root_path,'cohorts',institute,'mouse trajectories');

%% directory settings
bhv_dir = dir([bhv_path,filesep,'*.csv']);
gaped_dir = dir([gaped_path,filesep,'*.bmp']);
n_subjects = numel(bhv_dir);
n_images = numel(gaped_dir);

%% session selection
filter_spec = '*.csv';
dialog_title = 'Select behavioral file to read';
[file_names,path_name,filter_idx] = ...
    uigetfile(filter_spec,dialog_title,bhv_path,...
    'multiselect','on');
if filter_idx == 0
    return;
end
files = fullfile(path_name,file_names);
if iscell(files)
    bhv_files = files';
else
    bhv_files{1,1} = files;
end
n_files = numel(bhv_files);

%% load data

% iterate through files
for ff = 1 : n_files
    
    % load behavioral data
    bhv_file = bhv_files{ff};
    bhv = readtable(bhv_file);
    
    % parse meta data
    [~,bhv_filename] = fileparts(bhv_file);
    substrs = strsplit(bhv_filename,'_');
    subject_name = substrs{1};
    subject_age = substrs{2};
    subject_sex = substrs{3};
    subject_handedness = substrs{4};
    session_date = strjoin(substrs(7:end-1),'_');
    
    %% parse behavioral data
    stimuli = bhv.stimulus;
    reaction_time = bhv.reactionTime;
    movement_time = bhv.movementTime;
    choice_long = bhv.choiceLong;
    choice_correct = bhv.choiceCorrect;
    image_names = bhv.image;
    valid_flags = ...
        ~isnan(choice_long) & ...
        ismember(choice_long,[0,1]);
    stimulus_set = unique(stimuli(valid_flags))';
    boundary = nanmean(stimulus_set);
    n_stimuli = numel(stimulus_set);
    n_valid_trials = sum(valid_flags);
    n_trials = numel(valid_flags);
    trial_idcs = 1 : n_trials;
    
    %% parse mouse data
    
    % load mouse tracking data
    mouse_dir = dir([mouse_path,filesep,...
        subject_name,'*mouse*',session_date,'*.csv']);
    if ~isempty(mouse_dir)
        mouse_file = fullfile(mouse_dir.folder,mouse_dir.name);
        mouse = readtable(mouse_file);
        n_mousesamples = size(mouse,1);
        mouse_samples = 1 : n_mousesamples;
        mouse_availability_flags = ...
            mouse.position_x == -100 & ...
            mouse.position_y == -100;
        mouse_initiation_flags = ...
            mouse.position_x == -200 & ...
            mouse.position_y == -200;
        mouse_choice_flags = ...
            mouse.position_x == -400 & ...
            mouse.position_y == -400;
        mouse_availability_idcs = ...
            find(mouse_availability_flags);
        mouse_initiation_idcs = ...
            find(mouse_initiation_flags);
        mouse_initiation_idcs = mouse_initiation_idcs(valid_flags);
        mouse_choice_idcs = ...
            find(mouse_choice_flags);
    end
    
    %% color settings
    bg_clr = [1,1,1] * .05;
    fg_clr = 1 - bg_clr;
    
    %% figure & axes initialization
    
    % figure settings
    figure(...
        'name',sprintf('VMU24_%s',subject_name),...
        'numbertitle','off',...
        'inverthardcopy','off',...
        'windowstyle','docked',...
        'color',bg_clr);
    
    % axes settings
    n_rows = 2;
    n_cols = 3;
    n_sps = n_rows * n_cols - 1;
    sps = gobjects(n_sps,1);
    for ii = 1 : n_sps
        sps(ii) = subplot(n_rows,n_cols,ii+(ii >= n_cols));
    end
    sps(end) = subplot(n_rows,n_cols,[1,2]*n_cols);
    sps = sps([1,2,4,3,5]);
    set(sps,...
        'xlimspec','tight',...
        'ylimspec','tight',...
        'zlimspec','tight',...
        'nextplot','add',...
        'tickdir','out',...
        'color','none',...
        'layer','top',...
        'box','off',...
        'ticklength',[1,1]*.025,...
        'linewidth',.5,...
        'fontsize',12,...
        'xcolor',fg_clr,...
        'ycolor',fg_clr,...
        'zcolor',fg_clr,...
        'plotboxaspectratio',[1,1,1]);
    set(sps(1),...
        'ylim',ylim(sps(1))+[-1,1]*range(ylim(sps(1)))*.05,...
        'ytick',linspace(0,1,3));
    set(sps(5),...
        'xtick',[],...
        'ytick',[],...
        'ztick',[],...
        'xcolor','none',...
        'ycolor','none',...
        'zcolor','none',...
        'plotboxaspectratio',[1,3,1]);
    
    % axes labels
    xlabel(sps(1),'Interval time (s)');
    xlabel(sps(2),'Interval time (s)');
    xlabel(sps(3),'Interval time (s)');
    xlabel(sps(4),'Interval time (s)');
    ylabel(sps(1),'Proportion of long choices');
    ylabel(sps(2),'Reaction time (s)');
    ylabel(sps(3),'Movement time (s)');
    ylabel(sps(4),'Trial count');
    
    %% update axes
    xxtick = unique([stimulus_set,boundary]);
    xxticklabel = num2cell(xxtick);
    ticks2exclude = xor(...
        diff([xxtick,nan]) < .15,...
        diff([nan,xxtick]) < .15);
    xxticklabel(ticks2exclude) = {''};
    set(sps(1:4),...
        'xlim',([xxtick(1),xxtick(end)]+[-1,1]*range(xxtick)*.05),...
        'xtick',xxtick,...
        'xticklabel',xxticklabel);
    title(sps(1),sprintf('%s, %s y.o., %s-handed',...
        capitalize(subject_name),subject_age,lower(subject_handedness)),...
        'color',fg_clr);
    title(sps(4),sprintf('Total: %i trials',n_valid_trials),...
        'color',fg_clr);
    title(sps(5),'Mouse trajectories',...
        'color',fg_clr);
    
    %% plot psychometric curve
    
    % preallocation
    plong_avg_prev = nan(n_stimuli,1);
    plong_avg = nan(n_stimuli,1);
    plong_err = nan(n_stimuli,1);
    
    % iterate through stimuli
    for ii = 1 : n_stimuli
        stimulus_flags = stimuli == stimulus_set(ii);
        trial_flags = ...
            valid_flags & ...
            stimulus_flags;
        prev_flags = trial_idcs < n_trials;
        n = sum(trial_flags);
        plong_avg_prev(ii) = nanmean(choice_long(trial_flags(prev_flags)));
        plong_avg(ii) = nanmean(choice_long(trial_flags));
        plong_err(ii) = nanstd(choice_long(trial_flags)) / sqrt(n);
    end
    
    % plot psychometric performance
    plot(sps(1),stimulus_set,plong_avg_prev,...
        'color',[fg_clr,.25],...
        'marker','none',...
        'linewidth',1.5);
    errorbar(sps(1),stimulus_set,plong_avg,plong_err,...
        'color',[fg_clr,.25],...
        'marker','none',...
        'linewidth',.5,...
        'linestyle','none',...
        'capsize',0);
    plot(sps(1),stimulus_set,plong_avg,...
        'color',fg_clr,...
        'marker','o',...
        'markeredgecolor',bg_clr,...
        'markerfacecolor',fg_clr,...
        'markersize',7.5,...
        'linewidth',1.5);
    
    % plot reference lines
    plot(sps(1),...
        xlim(sps(1)),[1,1]*.5,':',...
        'color',fg_clr)
    plot(sps(1),...
        [1,1]*mean(xlim(sps(1))),ylim(sps(1)),':',...
        'color',fg_clr);
    
    %% plot reaction times
    
    % preallocation
    rt_med = nan(n_stimuli,2);
    rt_iqr = nan(n_stimuli,2,2);
    
    % iterate through stimuli
    for ii = 1 : n_stimuli
        stimulus_flags = stimuli == stimulus_set(ii);
        
        % iterate through outcomes
        for kk = [0,1]
            outcome_flags = choice_correct == kk;
            trial_flags = ...
                valid_flags & ...
                stimulus_flags & ...
                outcome_flags;
            rt_med(ii,kk+1) = ...
                nanmedian(reaction_time(trial_flags));
            rt_iqr(ii,kk+1,:) = ...
                quantile(reaction_time(trial_flags),[.25,.75]) - ...
                nanmedian(reaction_time(trial_flags));
        end
    end
    
    % iterate through outcomes
    for kk = [0,1]
        
        % plot average reaction times
        errorbar(sps(2),stimulus_set,rt_med(:,kk+1),...
            rt_iqr(:,kk+1,1),...
            rt_iqr(:,kk+1,2),...
            'color',fg_clr,...
            'marker','none',...
            'linewidth',.5,...
            'linestyle','none',...
            'capsize',0,...
            'handlevisibility','off');
        plot(sps(2),stimulus_set,rt_med(:,kk+1),...
            'color',fg_clr,...
            'marker','o',...
            'markeredgecolor',abs(kk-fg_clr),...
            'markerfacecolor',abs(kk-bg_clr),...
            'markersize',7.5,...
            'linewidth',1.5,...
            'linestyle',repmat('-',1,1+~kk));
    end
    
    % update axes
    yylim = quantile(rt_med(:),[0,1]) + [0,1e-6];
    yylim = [floor(yylim(1)*5)/5,ceil(yylim(2)*5)/5];
    set(sps(2),...
        'ylim',yylim+[-1,1]*range(yylim)*.05,...
        'ytick',linspace(yylim(1),yylim(2),3));
    
    % plot reference lines
    plot(sps(2),...
        [1,1]*boundary,ylim(sps(2)),':',...
        'color',fg_clr,...
        'handlevisibility','off');
    
    % legeng
    legend(sps(2),{'incorrect','correct'},...
        'location','southwest',...
        'textcolor',fg_clr,...
        'box','off');
    
    %% plot movement times
    
    % preallocation
    mt_med = nan(n_stimuli,2);
    mt_iqr = nan(n_stimuli,2,2);
    
    % iterate through stimuli
    for ii = 1 : n_stimuli
        stimulus_flags = stimuli == stimulus_set(ii);
        
        % iterate through outcomes
        for kk = [0,1]
            outcome_flags = choice_correct == kk;
            trial_flags = ...
                valid_flags & ...
                stimulus_flags & ...
                outcome_flags;
            mt_med(ii,kk+1) = ...
                nanmedian(movement_time(trial_flags));
            mt_iqr(ii,kk+1,:) = ...
                quantile(movement_time(trial_flags),[.25,.75]) - ...
                nanmedian(movement_time(trial_flags));
        end
    end
    
    % iterate through outcomes
    for kk = [0,1]
        
        % plot average movement times
        errorbar(sps(3),stimulus_set,mt_med(:,kk+1),...
            mt_iqr(:,kk+1,1),...
            mt_iqr(:,kk+1,2),...
            'color',fg_clr,...
            'marker','none',...
            'linewidth',.5,...
            'linestyle','none',...
            'capsize',0);
        plot(sps(3),stimulus_set,mt_med(:,kk+1),...
            'color',fg_clr,...
            'marker','o',...
            'markeredgecolor',abs(kk-fg_clr),...
            'markerfacecolor',abs(kk-bg_clr),...
            'markersize',7.5,...
            'linewidth',1.5,...
            'linestyle',repmat('-',1,1+~kk));
    end
    
    % update axes
    yylim = quantile(mt_med(:),[0,1]);
    yylim = [floor(yylim(1)*5)/5,ceil(yylim(2)*5)/5];
    set(sps(3),...
        'ylim',yylim+[-1,1]*range(yylim)*.05,...
        'ytick',linspace(yylim(1),yylim(2),3));
    
    % plot reference lines
    plot(sps(3),...
        [1,1]*boundary,ylim(sps(3)),':',...
        'color',fg_clr);
    
    %% plot stimulus histogram
    n_bins = 30;
    binwidth = .03;
    binedges = stimulus_set + [-1;1] * binwidth;
    binedges = sort(binedges(:))';
    bincounts = histcounts(stimuli,binedges);
    histogram(sps(4),...
        'binedges',binedges,...
        'bincounts',bincounts,...
        'edgecolor',bg_clr,...
        'facecolor',fg_clr,...
        'facealpha',1,...
        'linewidth',1.5);
    bincounts = histcounts(stimuli(1:end-1),binedges);
    histogram(sps(4),...
        'binedges',binedges,...
        'bincounts',bincounts,...
        'edgecolor',bg_clr,...
        'facecolor',bg_clr,...
        'facealpha',.75,...
        'linewidth',1.5);
    
    % plot reference lines
    plot(sps(4),...
        [1,1]*boundary,ylim(sps(4)),':',...
        'color',fg_clr);
    
    %% plot mouse trajectories
    if ~isempty(mouse_dir)
        
        % iterate through trials
        for tt = 1 : n_valid_trials
            mouse_flags = ...
                mouse_samples >= mouse_initiation_idcs(tt) & ...
                mouse_samples <= mouse_choice_idcs(tt) & ...
                mouse.position_x' >= -99;
            plot3(sps(5),...
                mouse.position_x(mouse_flags),...
                repmat(tt,sum(mouse_flags),1),...
                mouse.position_y(mouse_flags),...
                'color',[fg_clr,.25+.75*(tt==n_valid_trials)],...
                'marker','.',...
                'markersize',3,...+2*(tt==n_valid_trials),...
                'linestyle','-',...
                'linewidth',.25);%+.75*(tt==n_valid_trials));
        end
    end
    
    %% log performance
    fprintf('%s: %.1f%%\n',subject_name, nanmean(choice_correct) * 100);
end