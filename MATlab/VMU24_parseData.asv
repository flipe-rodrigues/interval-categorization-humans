%% initialization
close all;
clear;
clc;

%% path settings
root_path = fullfile(dropboxdir,...
    'data','fr','humans','vmu24');
gaped_path = fullfile(root_path,'gaped');
data_path = fullfile(root_path,'data');

%% parse image data
gaped_image_dir = dir([gaped_path,filesep,'*.png']);
n_images = numel(gaped_image_dir);
image_names = arrayfun(@(x) x.name(1:end-4),gaped_image_dir,...
    'uniformoutput',false);

% preallocation
image_ids = cell(n_images,1);
image_types = cell(n_images,1);
image_valence = nan(n_images,1);
image_arousal = nan(n_images,1);

% iterate through images
for ii = 1 : n_images
    image_name = image_names{ii};
    uscore_idcs = regexp(image_name,'_');
    image_ids{ii} = image_name(uscore_idcs(4)+1:end);
    image_metadata = strsplit(image_name,'_');
    image_types{ii} = lower(image_metadata{1});
    try
        image_valence(ii) = eval(strrep(image_metadata{2},'-','.'));
    catch
        image_valence(ii) = nan;
    end
    try
        image_arousal(ii) = eval(strrep(image_metadata{4},'-','.'));
    catch
        image_arousal(ii) = nan;
    end
end

% parse image types;
image_types = categorical(image_types);
type_set = unique(image_types);
n_types = numel(type_set);

%% parse institute data
data_dir = dir(data_path);
data_dir = data_dir(3:end);
institutes = string(vertcat(data_dir.name));
n_institutes = numel(data_dir);

%% utility function handles
getimagestat = @(I,S) ...
    arrayfun(@(x)S(ismember(image_ids,x)),I,...
    'uniformoutput',true);

%% parse & pool data across institutes and subjects

% iterate through institutes
for ii = 1 : n_institutes

    % parse subject data
    bhv_path = fullfile(data_path,institutes{ii},'behavior');
    bhv_dir = dir([bhv_path,filesep,'*.csv']);
    n_subjects = numel(bhv_dir);

    % iterate through subjects
    for ss = 1 : n_subjects
        progressreport(ss,n_subjects,sprintf('%i/%i',ii,n_institutes));

        %% load behavioral data
        bhv_file = fullfile(bhv_dir(ss).folder,bhv_dir(ss).name);
        bhv = readtable(bhv_file);

        % parse meta data
        substrs = strsplit(bhv_dir(ss).name,'_');
        subject_task = string(substrs{1}(1:4));
        subject_name = string(substrs{1}(5:end));
        subject_age = substrs{2};
        subject_handedness = substrs{3};
        session_date =  strjoin(substrs(7:end-1),'_');
        
        % parse task variant
        if contains(subject_task,'m','ignorecase',true)
            variant = 'mouse';
        elseif contains(subject_task,'k','ignorecase',true)
            variant = 'keyboard';
        end

        % parse contingency
        if contains(subject_task,'sl','ignorecase',true)
            contingency = 'leftshort';
        elseif contains(subject_task,'ls','ignorecase',true)
            contingency = 'leftlong';
        end

        %% parse behavioral data
        n_trials = size(bhv,1);
        trial_idcs = (1 : n_trials)';
        drawn_stimuli = bhv.stimulus;
        reaction_time = bhv.reactionTime;
        movement_time = bhv.movementTime;
        choice_time = reaction_time + movement_time;
        choice_left = bhv.choiceLeft;
        choice_long = bhv.choiceLong;
        choice_correct = bhv.choiceCorrect;
        drawn_images = bhv.image;
        iti = bhv.interTrialInterval;
        valid_flags = ...
            ~isnan(choice_long) & ...
            ismember(choice_long,[0,1]) & ...
            choice_time < quantile(choice_time,.99);
        n_valid_trials = sum(valid_flags);

        %% convert to table
        stimulus_table = table(...
            drawn_stimuli(valid_flags),...
            getimagestat(drawn_images(valid_flags),image_types),...
            getimagestat(drawn_images(valid_flags),image_valence),...
            getimagestat(drawn_images(valid_flags),image_arousal),...
            'variablenames',{'duration','category','valence','arousal'});
        choice_table = table(...
            choice_left(valid_flags),...
            choice_long(valid_flags),...
            choice_correct(valid_flags),...
            choice_time(valid_flags),...
            'variablenames',{'left','long','correct','time'});
        subject_table = table(...
            repmat(institutes(ii),n_valid_trials,1),...
            repmat(subject_name,n_valid_trials,1),...
            stimulus_table,...
            choice_table,...
            iti,...
            'variablenames',{'institute','subject','stimulus','choice','it'});

        %% append pooled data table
        if ss == 1
            institute_table = subject_table;
        else
            institute_table = [institute_table; subject_table];
        end
    end

    %% append pooled data table
    if ii == 1
        bhv_table = institute_table;
    else
        bhv_table = [bhv_table; institute_table];
    end
end

%% convert to categorical
bhv_table.institute = categorical(bhv_table.institute);
bhv_table.subject = categorical(bhv_table.subject);
bhv_table.stimulus.category = categorical(bhv_table.stimulus.category);

head(bhv_table)

%%

% parse stimuli
duration_set = unique(bhv_table.stimulus.duration);
n_durations = numel(duration_set);

% preallocation
psy = struct();

prev_choice = [nan;bhv_table.choice.long(1:end-1)];
prev_choice = [nan;bhv_table.stimulus.duration(1:end-1)] > 1.2;

figure;
hold on;

%
for kk = [0,1]
    prev_flags = prev_choice == kk;

    % iterate through stimulus durations
    for ii = 1 : n_durations
        stimulus_flags = bhv_table.stimulus.duration == duration_set(ii);
        trial_flags = ...
            prev_flags & ...
            stimulus_flags;

        % choice data
        psy.x(ii,1) = duration_set(ii);
        psy.y(ii,1) = sum(bhv_table.choice.long(trial_flags));
        psy.n(ii,1) = sum(trial_flags);
        psy.err(ii,1) = ...
            std(bhv_table.choice.long(trial_flags)) / sqrt(sum(trial_flags));
    end

    plot(psy.x,psy.y./psy.n)
end