%% initialization
% close all;
clear;
clc;

%% selection settings
pilot = 'pilot ii';
institute = 'vmu';
selected_types = {'dogs','wolves'};
selected_types = {'horses','zebras'};
selected_types = {'negative','neutral','positive'};
selected_types = {'dogs','horses','negative','neutral','positive','zebras','wolves'};
trial_cutoff = inf;

%% path settings
root_path = fullfile(dropboxdir,...
    'data','fr','humans','vmu24',pilot);
gaped_path = fullfile(root_path,'gaped');
bhv_path = fullfile(root_path,'cohorts',institute,'behavior');

%% session selection
filter_spec = '*.csv';
dialog_title = 'Select behavioral file(s) to read';
[file_names,path_name,filter_idx] = ...
    uigetfile(filter_spec,dialog_title,bhv_path,...
    'multiselect','on');
if filter_idx == 0
    return;
end
files = fullfile(path_name,file_names);
if iscell(files)
    bhv_files = files';
else
    bhv_files{1,1} = files;
end
n_subjects = numel(bhv_files);

%% directory settings
gaped_image_dir = dir([gaped_path,filesep,'*.png']);
n_images = numel(gaped_image_dir);

%% parse GAPED images & scores
image_names = arrayfun(@(x) x.name(1:end-4),gaped_image_dir,...
    'uniformoutput',false);

% preallocation
image_ids = cell(n_images,1);
image_types = cell(n_images,1);
image_valence = nan(n_images,1);
image_arousal = nan(n_images,1);
image_intensity = nan(n_images,1);

% iterate through images
for ii = 1 : n_images
    progressreport(ii,n_images,'extracting image metrics');
    image_name = image_names{ii};
    uscore_idcs = regexp(image_name,'_');
    if strcmpi(pilot,'pilot i')
        image_ids{ii} = image_name(uscore_idcs(4)+1:end);
    elseif strcmpi(pilot,'pilot ii')
        image_ids{ii} = image_name;
    end
    image_metadata = strsplit(image_name,'_');
    image_types{ii} = lower(image_metadata{1});
    try
        image_valence(ii) = eval(strrep(image_metadata{2},'-','.'));
    catch
        image_valence(ii) = nan;
    end
    try
        image_arousal(ii) = eval(strrep(image_metadata{4},'-','.'));
    catch
        image_arousal(ii) = nan;
    end
    image_file = fullfile(gaped_image_dir(ii).folder,gaped_image_dir(ii).name);
    I = imread(image_file);
    image_intensity(ii) = nanmean(I,'all');
end

% parse image types;
image_types = categorical(image_types);
type_set = unique(image_types(ismember(image_types,selected_types)));
n_types = numel(type_set);

%% cluster image scores
n_clusters = 4;
image_clusters = kmeans([...
    image_valence,...
    image_arousal,...
    image_intensity,...
    ],n_clusters);
mus = nan(n_clusters,2);
for kk = 1 : n_clusters
    cluster_flags = image_clusters == kk;
    mus(kk,1) = nanmean(image_valence(cluster_flags));
    mus(kk,2) = nanmean(image_arousal(cluster_flags));
end
[~,cluster_sorted_idcs] = sort(mus(:,2));

%% color settings
bg_clr = [1,1,1] * .05;
fg_clr = 1 - bg_clr;
cluster_clrs = colorlerp([[.0,.4,.95];fg_clr;[.95,.25,.35]],n_clusters);
type_clrs = summer(n_types);

%% figure & axes initialization

% figure settings
figure(...
    'name',sprintf('VMU24_group_%s',institute),...
    'numbertitle','off',...
    'inverthardcopy','off',...
    'windowstyle','docked',...
    'color',bg_clr);

% axes settings
n_rows = 2;
n_cols = 3;
n_sps = n_rows * n_cols;
sps = gobjects(n_sps,1);
for ii = 1 : n_sps
    sps(ii) = subplot(n_rows,n_cols,ii);
end
set(sps,...
    'xlimspec','tight',...
    'ylimspec','tight',...
    'zlimspec','tight',...
    'nextplot','add',...
    'tickdir','out',...
    'color','none',...
    'layer','top',...
    'box','off',...
    'ticklength',[1,1]*.025,...
    'linewidth',.5,...
    'fontsize',12,...
    'xcolor',fg_clr,...
    'ycolor',fg_clr,...
    'zcolor',fg_clr,...
    'plotboxaspectratio',[1,1,1]);
% set(sps,...
%     'xlim',[0,2.4]+[-1,1]*.05,...
%     'xtick',linspace(0,2.4,5),...
%     'ylim',ylim(sps(1))+[-1,1]*range(ylim(sps(1)))*.05,...
%     'ytick',linspace(0,1,3));

% axes labels
for ii = 1 : n_rows
    xlabel(sps(1+(ii-1)*n_cols),'Valence (a.u.)');
    xlabel(sps(2+(ii-1)*n_cols),'Interval time (s)');
    xlabel(sps(3+(ii-1)*n_cols),'Interval time (s)');
    % xlabel(sps(4+(ii-1)*n_cols),'Interval time (s)');
    ylabel(sps(1+(ii-1)*n_cols),'Arousal (a.u.)');
    ylabel(sps(2+(ii-1)*n_cols),'Proportion of long choices');
    ylabel(sps(3+(ii-1)*n_cols),'Choice time (s)');
    % ylabel(sps(4+(ii-1)*n_cols),'Movement time (s)');
    zlabel(sps(1+(ii-1)*n_cols),'Intensity (a.u.)');
end

% 3D axes view
for ii = 1 : n_rows
    set(sps(1+(ii-1)*n_cols),'view',[45,45]);
end

%% utility function handles
getimagestat = @(I,S) ...
    arrayfun(@(x)S(ismember(image_ids,x)),I,...
    'uniformoutput',true);

%% pool data across subjects

% preallocation
subject_stimuli = cell(n_subjects,1);
subject_choices = cell(n_subjects,1);
subject_reactiontimes = cell(n_subjects,1);
subject_movementtimes = cell(n_subjects,1);
subject_choicetimes = cell(n_subjects,1);
subject_valence = cell(n_subjects,1);
subject_arousal = cell(n_subjects,1);
subject_intensity = cell(n_subjects,1);
subject_clusters = cell(n_subjects,1);
subject_types = cell(n_subjects,1);

% iterate through subjects
for ss = 1 : n_subjects

    %% load behavioral data
    bhv_file = bhv_files{ss};
    [~,bhv_filename] = fileparts(bhv_file);
    bhv = readtable(bhv_file);

    % parse meta data
    substrs = strsplit(bhv_filename,'_');
    subject_name = substrs{1};
    subject_age = substrs{2};
    subject_handedness = substrs{3};
    session_date =  strjoin(substrs(7:end-1),'_');

    %% parse behavioral data
    n_trials = size(bhv,1);
    trial_idcs = (1 : n_trials)';
    drawn_stimuli = bhv.stimulus;
    reaction_time = bhv.reactionTime;
    movement_time = bhv.movementTime;
    choice_time = reaction_time + movement_time;
    choice_long = bhv.choiceLong;
    choice_correct = bhv.choiceCorrect;
    drawn_images = bhv.image;
    valid_flags = ...
        trial_idcs > 44 & trial_idcs < trial_cutoff & ...
        ~isnan(choice_long) & ...
        ismember(choice_long,[0,1]) & ...
        choice_time < quantile(choice_time,.99);
    n_valid_trials = sum(valid_flags);

    %% load & parse mouse tracking data
    % mouse_dir = dir([mouse_path,filesep,...
    %     subject_name,'*mouse*',session_date,'*.csv']);
    % if ~isempty(mouse_dir)
    %     mouse_file = fullfile(mouse_dir.folder,mouse_dir.name);
    %     mouse = readtable(mouse_file);
    %     n_mousesamples = size(mouse,1);
    %     mouse_samples = 1 : n_mousesamples;
    %     mouse_initiation_flags = ...
    %         mouse.position_x == -200 & ...
    %         mouse.position_y == -200;
    %     mouse_choice_flags = ...
    %         mouse.position_x == -400 & ...
    %         mouse.position_y == -400;
    %     mouse_initiation_idcs = find(mouse_initiation_flags);
    %     mouse_choice_idcs = find(mouse_choice_flags);
    % 
    %     % iterate through trials
    %     for tt = 1 : n_valid_trials
    %         mouse_flags = ...
    %             mouse_samples >= mouse_initiation_idcs(tt) & ...
    %             mouse_samples <= mouse_choice_idcs(tt) & ...
    %             mouse.position_x' >= -99;
    %         subject_mouseposx{tt} = mouse.position_x(mouse_flags);
    %         subject_mouseposy{tt} = mouse.position_y(mouse_flags);
    %     end
    % end

    %% store current subject data
    subject_stimuli{ss} = drawn_stimuli(valid_flags);
    subject_choices{ss} = choice_long(valid_flags);
    subject_reactiontimes{ss} = reaction_time(valid_flags);
    subject_movementtimes{ss} = movement_time(valid_flags);
    subject_choicetimes{ss} = choice_time(valid_flags);
    subject_valence{ss} = getimagestat(drawn_images(valid_flags),image_valence);
    subject_arousal{ss} = getimagestat(drawn_images(valid_flags),image_arousal);
    subject_intensity{ss} = getimagestat(drawn_images(valid_flags),image_intensity);
    subject_clusters{ss} = getimagestat(drawn_images(valid_flags),image_clusters);
    subject_types{ss} = getimagestat(drawn_images(valid_flags),image_types);
end

%% pool across subjects
pool_stimuli = vertcat(subject_stimuli{:});
pool_choices = vertcat(subject_choices{:});
pool_reactiontimes = vertcat(subject_reactiontimes{:});
pool_movementtimes = vertcat(subject_movementtimes{:});
pool_choicetimes = vertcat(subject_choicetimes{:});
pool_valence = vertcat(subject_valence{:});
pool_arousal = vertcat(subject_arousal{:});
pool_intensity = vertcat(subject_intensity{:});
pool_clusters = vertcat(subject_clusters{:});
pool_types = vertcat(subject_types{:});

%% enforce selection
selected_flags = ismember(pool_types,selected_types);

%% stimulus settings
stimulus_set = unique(pool_stimuli);
boundary = mean(stimulus_set);
n_stimuli = numel(stimulus_set);

%% outcome settings
pool_outcomes = pool_choices == (pool_stimuli > boundary);
outcome_set = unique(pool_outcomes);
n_outcomes = numel(outcome_set);

%% CLUSTERS

% iterate through image clusters
for kk = 1 : n_clusters
    cluster_flags = ...
        selected_flags & ...
        pool_clusters == kk;
    if sum(cluster_flags) == 0
        continue;
    end

    % preallocation
    psy = struct();
    rt = struct();
    mt = struct();
    ct = struct();

    % iterate through stimuli
    for ii = 1 : n_stimuli
        stimulus_flags = pool_stimuli == stimulus_set(ii);
        trial_flags = ...
            cluster_flags & ...
            stimulus_flags;

        % choice data
        psy.x(ii,1) = stimulus_set(ii);
        psy.y(ii,1) = sum(pool_choices(trial_flags));
        psy.n(ii,1) = sum(trial_flags);
        psy.err(ii,1) = ...
            std(pool_choices(trial_flags)) / sqrt(sum(trial_flags));

        % iterate through outcomes
        for jj = 1 : n_outcomes
            outcome_flags = pool_outcomes == outcome_set(jj);
            trial_flags = ...
                cluster_flags & ...
                stimulus_flags & ...
                outcome_flags;

            % reaction time data
            rt.med(ii,jj,1) = median(pool_reactiontimes(trial_flags));
            rt.iqr(ii,jj,:) = ...
                quantile(pool_reactiontimes(trial_flags),[.25,.75]) - ...
                median(pool_reactiontimes(trial_flags));

            % movement time data
            mt.med(ii,jj,1) = median(pool_movementtimes(trial_flags));
            mt.iqr(ii,jj,:) = ...
                quantile(pool_movementtimes(trial_flags),[.25,.75]) - ...
                median(pool_movementtimes(trial_flags));

            % choice time data
            ct.med(ii,jj,1) = median(pool_choicetimes(trial_flags));
            ct.iqr(ii,jj,:) = ...
                quantile(pool_choicetimes(trial_flags),[.25,.75]) - ...
                median(pool_choicetimes(trial_flags));
        end
    end

    %% plot joint distribution of valence & arousal scores
%     grapeplot(pool_valence(cluster_flags),pool_arousal(cluster_flags),...
%         'markeredgecolor',bg_clr,...
%         'markerfacecolor',cluster_clrs(kk,:),...
%         'markersize',5,...
%         'linewidth',1.5,...
%         'parent',sps(1));
    plot3(...
        pool_valence(cluster_flags),...
        pool_arousal(cluster_flags),...
        pool_intensity(cluster_flags),...
        'marker','o',...
        'markeredgecolor',bg_clr,...
        'markerfacecolor',cluster_clrs(kk,:),...
        'markersize',7.5,...
        'linewidth',1.5,...
        'linestyle','none',...
        'parent',sps(1));

    %% plot psychometric performance
    errorbar(sps(2),stimulus_set,psy.y./psy.n,psy.err,...
        'color',cluster_clrs(kk,:),...
        'marker','none',...
        'linewidth',.5,...
        'linestyle','none',...
        'capsize',0,...
        'handlevisibility','off');
    plot(sps(2),stimulus_set,psy.y./psy.n,...
        'color',cluster_clrs(kk,:),...
        'marker','o',...
        'markeredgecolor',bg_clr,...
        'markerfacecolor',cluster_clrs(kk,:),...
        'markersize',7.5,...
        'linewidth',1.5);

    % plot reference lines
    plot(sps(2),...
        xlim(sps(2)),[1,1]*.5,':',...
        'color',fg_clr,...
        'handlevisibility','off');
    plot(sps(2),...
        [1,1]*mean(xlim(sps(2))),ylim(sps(2)),':',...
        'color',fg_clr,...
        'handlevisibility','off');

    %% plot average choice times

    % iterate through outcomes
    for ii = 1 : n_outcomes
        errorbar(sps(3),stimulus_set,ct.med(:,ii,:),...
            ct.iqr(:,ii,1),...
            ct.iqr(:,ii,2),...
            'color',cluster_clrs(kk,:),...
            'marker','none',...
            'linewidth',.5,...
            'linestyle','none',...
            'capsize',0,...
            'handlevisibility','off');
        plot(sps(3),stimulus_set,ct.med(:,ii,:),...
            'color',cluster_clrs(kk,:),...
            'marker','o',...
            'markeredgecolor',bg_clr,...
            'markerfacecolor',cluster_clrs(kk,:),...
            'markersize',7.5,...
            'linewidth',1.5,...
            'linestyle',repmat('-',1,1+~outcome_set(ii)));
    end
end

%% TYPES

% update title
title(sps(1),sprintf('N = %i subjects (%i trials total)',...
    n_subjects,numel(pool_stimuli)),...
    'color',fg_clr);

% iterate through image types
for kk = 1 : n_types
    type_flags = ...
        selected_flags & ...
        pool_types == type_set(kk);
    if sum(type_flags) == 0
        continue;
    end

    % preallocation
    psy = struct();
    rt = struct();
    mt = struct();

    % iterate through stimuli
    for ii = 1 : n_stimuli
        stimulus_flags = pool_stimuli == stimulus_set(ii);
        trial_flags = ...
            type_flags & ...
            stimulus_flags;

        % choice data
        psy.x(ii,1) = stimulus_set(ii)/3;
        psy.y(ii,1) = sum(pool_choices(trial_flags));
        psy.n(ii,1) = sum(trial_flags);
        psy.err(ii,1) = ...
            std(pool_choices(trial_flags)) / sqrt(sum(trial_flags));

        % iterate through outcomes
        for jj = 1 : n_outcomes
            outcome_flags = pool_outcomes == outcome_set(jj);
            trial_flags = ...
                type_flags & ...
                stimulus_flags & ...
                outcome_flags;

            % reaction time data
            rt.med(ii,jj,1) = median(pool_reactiontimes(trial_flags));
            rt.iqr(ii,jj,:) = ...
                quantile(pool_reactiontimes(trial_flags),[.25,.75]) - ...
                median(pool_reactiontimes(trial_flags));

            % movement time data
            mt.med(ii,jj,1) = median(pool_movementtimes(trial_flags));
            mt.iqr(ii,jj,:) = ...
                quantile(pool_movementtimes(trial_flags),[.25,.75]) - ...
                median(pool_movementtimes(trial_flags));

            % choice time data
            ct.med(ii,jj,1) = median(pool_choicetimes(trial_flags));
            ct.iqr(ii,jj,:) = ...
                quantile(pool_choicetimes(trial_flags),[.25,.75]) - ...
                median(pool_choicetimes(trial_flags));
        end
    end

    %% plot joint distribution of valence & arousal scores
%     grapeplot(pool_valence(type_flags),pool_arousal(type_flags),...
%         'markeredgecolor',bg_clr,...
%         'markerfacecolor',type_clrs(kk,:),...
%         'markersize',5,...
%         'linewidth',1.5,...
%         'parent',sps(1+n_cols));
    plot3(...
        pool_valence(type_flags),...
        pool_arousal(type_flags),...
        pool_intensity(type_flags),...
        'marker','o',...
        'markeredgecolor',bg_clr,...
        'markerfacecolor',type_clrs(kk,:),...
        'markersize',7.5,...
        'linewidth',1.5,...
        'linestyle','none',...
        'parent',sps(1+n_cols));
    
    %% plot psychometric performance
    errorbar(sps(2+n_cols),stimulus_set,psy.y./psy.n,psy.err,...
        'color',type_clrs(kk,:),...
        'marker','none',...
        'linewidth',.5,...
        'linestyle','none',...
        'capsize',0,...
        'handlevisibility','off');
    plot(sps(2+n_cols),stimulus_set,psy.y./psy.n,...
        'color',type_clrs(kk,:),...
        'marker','o',...
        'markeredgecolor',bg_clr,...
        'markerfacecolor',type_clrs(kk,:),...
        'markersize',7.5,...
        'linewidth',1.5);

    % plot reference lines
    plot(sps(2+n_cols),...
        xlim(sps(2+n_cols)),[1,1]*.5,':',...
        'color',fg_clr,...
        'handlevisibility','off');
    plot(sps(2+n_cols),...
        [1,1]*mean(xlim(sps(2+n_cols))),ylim(sps(2+n_cols)),':',...
        'color',fg_clr,...
        'handlevisibility','off');

    %% plot average choice times

    % iterate through outcomes
    for ii = 1 : n_outcomes
        errorbar(sps(3+n_cols),stimulus_set,ct.med(:,ii,:),...
            ct.iqr(:,ii,1),...
            ct.iqr(:,ii,2),...
            'color',type_clrs(kk,:),...
            'marker','none',...
            'linewidth',.5,...
            'linestyle','none',...
            'capsize',0,...
            'handlevisibility','off');
        plot(sps(3+n_cols),stimulus_set,ct.med(:,ii,:),...
            'color',type_clrs(kk,:),...
            'marker','o',...
            'markeredgecolor',bg_clr,...
            'markerfacecolor',type_clrs(kk,:),...
            'markersize',7.5,...
            'linewidth',1.5,...
            'linestyle',repmat('-',1,1+~outcome_set(ii)));
    end
end

%% legends
legend(sps(2+n_cols),selected_types,...
    'color','none',...
    'textcolor',fg_clr,...
    'edgecolor',fg_clr,...
    'location','southeast');